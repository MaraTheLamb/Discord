# https://aka.ms/yaml

variables:
  PIPENV_HIDE_EMOJIS: 1
  PIPENV_IGNORE_VIRTUALENVS: 1
  PIPENV_NOSPIN: 1

jobs:
  - job: test
    displayName: 'Lint & Test'
    pool:
      vmImage: ubuntu-16.04

    variables:
      PIP_CACHE_DIR: ".cache/pip"

    steps:
      - task: UsePythonVersion@0
        displayName: 'Set Python version'
        inputs:
          versionSpec: '3.7.x'
          addToPath: true

      - script: pip install pipenv
        displayName: 'Install pipenv'

      - script: pipenv install --dev --deploy --system
        displayName: 'Install project using pipenv'

      - script: python -m flake8
        displayName: 'Run linter'

      - script: BOT_API_KEY=foo BOT_TOKEN=bar WOLFRAM_API_KEY=baz REDDIT_CLIENT_ID=spam REDDIT_SECRET=ham coverage run -m xmlrunner
        displayName: Run tests

      - script: coverage report -m && coverage xml -o coverage.xml
        displayName: Generate test coverage report

      - task: PublishCodeCoverageResults@1
        displayName: 'Publish Coverage Results'
        condition: succeededOrFailed()
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: coverage.xml

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        displayName: 'Publish Test Results'
        inputs:
          testResultsFiles: '**/TEST-*.xml'
          testRunTitle: 'Bot Test Results'

  - job: build
    displayName: 'Build & Push Container'
    dependsOn: 'test'
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

    steps:
      - task: Docker@2
        displayName: 'Build & Push Container'
        inputs:
          containerRegistry: 'DockerHub'
          repository: 'pythondiscord/bot'
          command: 'buildAndPush'
          Dockerfile: 'Dockerfile'
          buildContext: '.'
          tags: 'latest'
